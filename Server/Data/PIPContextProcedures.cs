// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Server.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Server.Data
{
    public partial class PIPContext
    {
        private IPIPContextProcedures _procedures;

        public virtual IPIPContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PIPContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPIPContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DepartmentBudgetsALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DepartmentBudgetsSINGLEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DepartmentsALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DepartmentsSINGLEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeIncentiveMonthliesALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeIncentiveMonthliesSINGLEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeIncentivesALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeIncentivesSINGLEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeesALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeesSINGLEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllEmployeesReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PayGradesALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PayGradesSINGLEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PenaltiesALLResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PenaltiesSINGLEResult>().HasNoKey().ToView(null);
        }
    }

    public partial class PIPContextProcedures : IPIPContextProcedures
    {
        private readonly PIPContext _context;

        public PIPContextProcedures(PIPContext context)
        {
            _context = context;
        }

        public virtual async Task<List<DepartmentBudgetsALLResult>> DepartmentBudgetsALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DepartmentBudgetsALLResult>("EXEC @returnValue = [dbo].[DepartmentBudgetsALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DepartmentBudgetsCREATEAsync(int? DepartmentId, decimal? BudgetAmount, decimal? ActualBudgetAmount, decimal? Q1, decimal? Q2, decimal? Q3, decimal? Q4, decimal? PercentegaScore, string Year, DateTime? CreatedOn, DateTime? UpdatedOn, bool? IsDeleted, bool? IsCurrent, decimal? GM, int? Month, string Date, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentId",
                    Value = DepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BudgetAmount",
                    Precision = 18,
                    Scale = 2,
                    Value = BudgetAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ActualBudgetAmount",
                    Precision = 18,
                    Scale = 2,
                    Value = ActualBudgetAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q1",
                    Precision = 18,
                    Scale = 2,
                    Value = Q1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q2",
                    Precision = 18,
                    Scale = 2,
                    Value = Q2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q3",
                    Precision = 18,
                    Scale = 2,
                    Value = Q3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q4",
                    Precision = 18,
                    Scale = 2,
                    Value = Q4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PercentegaScore",
                    Precision = 18,
                    Scale = 2,
                    Value = PercentegaScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Size = -1,
                    Value = Year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrent",
                    Value = IsCurrent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GM",
                    Precision = 18,
                    Scale = 2,
                    Value = GM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Date",
                    Size = -1,
                    Value = Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DepartmentBudgetsCREATE] @DepartmentId, @BudgetAmount, @ActualBudgetAmount, @Q1, @Q2, @Q3, @Q4, @PercentegaScore, @Year, @CreatedOn, @UpdatedOn, @IsDeleted, @IsCurrent, @GM, @Month, @Date, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DepartmentBudgetsDELETEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DepartmentBudgetsDELETE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DepartmentBudgetsSINGLEResult>> DepartmentBudgetsSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DepartmentBudgetsSINGLEResult>("EXEC @returnValue = [dbo].[DepartmentBudgetsSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DepartmentBudgetsUPDATEAsync(int? Id, int? DepartmentId, decimal? BudgetAmount, decimal? ActualBudgetAmount, decimal? Q1, decimal? Q2, decimal? Q3, decimal? Q4, decimal? PercentegaScore, string Year, DateTime? CreatedOn, DateTime? UpdatedOn, bool? IsDeleted, bool? IsCurrent, decimal? GM, int? Month, string Date, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentId",
                    Value = DepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BudgetAmount",
                    Precision = 18,
                    Scale = 2,
                    Value = BudgetAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ActualBudgetAmount",
                    Precision = 18,
                    Scale = 2,
                    Value = ActualBudgetAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q1",
                    Precision = 18,
                    Scale = 2,
                    Value = Q1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q2",
                    Precision = 18,
                    Scale = 2,
                    Value = Q2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q3",
                    Precision = 18,
                    Scale = 2,
                    Value = Q3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Q4",
                    Precision = 18,
                    Scale = 2,
                    Value = Q4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PercentegaScore",
                    Precision = 18,
                    Scale = 2,
                    Value = PercentegaScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Year",
                    Size = -1,
                    Value = Year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrent",
                    Value = IsCurrent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GM",
                    Precision = 18,
                    Scale = 2,
                    Value = GM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Date",
                    Size = -1,
                    Value = Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DepartmentBudgetsUPDATE] @Id, @DepartmentId, @BudgetAmount, @ActualBudgetAmount, @Q1, @Q2, @Q3, @Q4, @PercentegaScore, @Year, @CreatedOn, @UpdatedOn, @IsDeleted, @IsCurrent, @GM, @Month, @Date, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DepartmentsALLResult>> DepartmentsALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DepartmentsALLResult>("EXEC @returnValue = [dbo].[DepartmentsALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DepartmentsCREATEAsync(string Name, string Code, string Description, string Specification, bool? IsDeleted, DateTime? CreatedOn, DateTime? UpdatedOn, string logo, decimal? Score, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = -1,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Code",
                    Size = -1,
                    Value = Code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Specification",
                    Size = -1,
                    Value = Specification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logo",
                    Size = -1,
                    Value = logo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Score",
                    Precision = 18,
                    Value = Score ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DepartmentsCREATE] @Name, @Code, @Description, @Specification, @IsDeleted, @CreatedOn, @UpdatedOn, @logo, @Score, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DepartmentsDELETEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DepartmentsDELETE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DepartmentsSINGLEResult>> DepartmentsSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DepartmentsSINGLEResult>("EXEC @returnValue = [dbo].[DepartmentsSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DepartmentsUPDATEAsync(int? Id, string DeptName, string Code, string Description, string Specification, bool? IsDeleted, DateTime? CreatedOn, DateTime? UpdatedOn, string logo, decimal? Score, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DeptName",
                    Size = -1,
                    Value = DeptName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Code",
                    Size = -1,
                    Value = Code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Specification",
                    Size = -1,
                    Value = Specification ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "logo",
                    Size = -1,
                    Value = logo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Score",
                    Precision = 18,
                    Scale = 2,
                    Value = Score ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DepartmentsUPDATE] @Id, @DeptName, @Code, @Description, @Specification, @IsDeleted, @CreatedOn, @UpdatedOn, @logo, @Score, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeIncentiveMonthliesALLResult>> EmployeeIncentiveMonthliesALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeIncentiveMonthliesALLResult>("EXEC @returnValue = [dbo].[EmployeeIncentiveMonthliesALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeeIncentiveMonthliesCREATEAsync(decimal? ExpectedPIPPayable, decimal? ActualPIPPayable, decimal? MDPenalty, int? PercentageScore, DateTime? Month, int? EmployeeId, int? DepartmentId, string FirstAuthorizer, string SecondAuthorizer, string ThirdAuthorizer, bool? IsDeleted, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExpectedPIPPayable",
                    Precision = 18,
                    Scale = 2,
                    Value = ExpectedPIPPayable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ActualPIPPayable",
                    Precision = 18,
                    Scale = 2,
                    Value = ActualPIPPayable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "MDPenalty",
                    Precision = 18,
                    Scale = 2,
                    Value = MDPenalty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PercentageScore",
                    Value = PercentageScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentId",
                    Value = DepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstAuthorizer",
                    Size = -1,
                    Value = FirstAuthorizer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondAuthorizer",
                    Size = -1,
                    Value = SecondAuthorizer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThirdAuthorizer",
                    Size = -1,
                    Value = ThirdAuthorizer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeeIncentiveMonthliesCREATE] @ExpectedPIPPayable, @ActualPIPPayable, @MDPenalty, @PercentageScore, @Month, @EmployeeId, @DepartmentId, @FirstAuthorizer, @SecondAuthorizer, @ThirdAuthorizer, @IsDeleted, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeeIncentiveMonthliesDELETEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeeIncentiveMonthliesDELETE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeIncentiveMonthliesSINGLEResult>> EmployeeIncentiveMonthliesSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeIncentiveMonthliesSINGLEResult>("EXEC @returnValue = [dbo].[EmployeeIncentiveMonthliesSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeeIncentiveMonthliesUPDATEAsync(int? Id, decimal? ExpectedPIPPayable, decimal? ActualPIPPayable, decimal? MDPenalty, int? PercentageScore, DateTime? Month, int? EmployeeId, int? DepartmentId, string FirstAuthorizer, string SecondAuthorizer, string ThirdAuthorizer, bool? IsDeleted, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExpectedPIPPayable",
                    Precision = 18,
                    Scale = 2,
                    Value = ExpectedPIPPayable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ActualPIPPayable",
                    Precision = 18,
                    Scale = 2,
                    Value = ActualPIPPayable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "MDPenalty",
                    Precision = 18,
                    Scale = 2,
                    Value = MDPenalty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PercentageScore",
                    Value = PercentageScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentId",
                    Value = DepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstAuthorizer",
                    Size = -1,
                    Value = FirstAuthorizer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondAuthorizer",
                    Size = -1,
                    Value = SecondAuthorizer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThirdAuthorizer",
                    Size = -1,
                    Value = ThirdAuthorizer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeeIncentiveMonthliesUPDATE] @Id, @ExpectedPIPPayable, @ActualPIPPayable, @MDPenalty, @PercentageScore, @Month, @EmployeeId, @DepartmentId, @FirstAuthorizer, @SecondAuthorizer, @ThirdAuthorizer, @IsDeleted, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeIncentivesALLResult>> EmployeeIncentivesALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeIncentivesALLResult>("EXEC @returnValue = [dbo].[EmployeeIncentivesALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeeIncentivesCREATEAsync(decimal? TotalIncentivePayTarget, decimal? TotalPayableYearEnd, decimal? TotalMonthlyPIP, decimal? PIPPayableMonthly, bool? IsCurrent, int? EmployeeId, bool? IsDeleted, DateTime? CreatedOn, DateTime? UpdatedOn, int? BudgetId, decimal? FinalScore, decimal? Pay, decimal? PenaltyCharge, string Month, string Date, string FirstAuth, string SecondAuth, string ThirdAuth, string Comment1, string Comment2, string Comment3, string ForeName, string PenaltyName, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TotalIncentivePayTarget",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIncentivePayTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalPayableYearEnd",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalPayableYearEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalMonthlyPIP",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalMonthlyPIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PIPPayableMonthly",
                    Precision = 18,
                    Scale = 2,
                    Value = PIPPayableMonthly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrent",
                    Value = IsCurrent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BudgetId",
                    Value = BudgetId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FinalScore",
                    Precision = 18,
                    Scale = 2,
                    Value = FinalScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Pay",
                    Precision = 18,
                    Scale = 2,
                    Value = Pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenaltyCharge",
                    Precision = 18,
                    Scale = 2,
                    Value = PenaltyCharge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Size = -1,
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Date",
                    Size = -1,
                    Value = Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstAuth",
                    Size = -1,
                    Value = FirstAuth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondAuth",
                    Size = -1,
                    Value = SecondAuth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThirdAuth",
                    Size = -1,
                    Value = ThirdAuth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment1",
                    Size = -1,
                    Value = Comment1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment2",
                    Size = -1,
                    Value = Comment2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment3",
                    Size = -1,
                    Value = Comment3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ForeName",
                    Size = -1,
                    Value = ForeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PenaltyName",
                    Size = -1,
                    Value = PenaltyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeeIncentivesCREATE] @TotalIncentivePayTarget, @TotalPayableYearEnd, @TotalMonthlyPIP, @PIPPayableMonthly, @IsCurrent, @EmployeeId, @IsDeleted, @CreatedOn, @UpdatedOn, @BudgetId, @FinalScore, @Pay, @PenaltyCharge, @Month, @Date, @FirstAuth, @SecondAuth, @ThirdAuth, @Comment1, @Comment2, @Comment3, @ForeName, @PenaltyName, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeeIncentivesDELETEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeeIncentivesDELETE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeeIncentivesSINGLEResult>> EmployeeIncentivesSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeeIncentivesSINGLEResult>("EXEC @returnValue = [dbo].[EmployeeIncentivesSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeeIncentivesUPDATEAsync(int? Id, decimal? TotalIncentivePayTarget, decimal? TotalPayableYearEnd, decimal? TotalMonthlyPIP, decimal? PIPPayableMonthly, bool? IsCurrent, int? EmployeeId, DateTime? UpdatedOn, bool? IsDeleted, DateTime? CreatedOn, int? BudgetId, decimal? FinalScore, decimal? Pay, decimal? PenaltyCharge, string Month, string Date, string FirstAuth, string SecondAuth, string ThirdAuth, string Comment1, string Comment2, string Comment3, string ForeName, string PenaltyName, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIncentivePayTarget",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIncentivePayTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalPayableYearEnd",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalPayableYearEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalMonthlyPIP",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalMonthlyPIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PIPPayableMonthly",
                    Precision = 18,
                    Scale = 2,
                    Value = PIPPayableMonthly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrent",
                    Value = IsCurrent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BudgetId",
                    Value = BudgetId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FinalScore",
                    Precision = 18,
                    Scale = 2,
                    Value = FinalScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Pay",
                    Precision = 18,
                    Scale = 2,
                    Value = Pay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenaltyCharge",
                    Precision = 18,
                    Scale = 2,
                    Value = PenaltyCharge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Month",
                    Size = -1,
                    Value = Month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Date",
                    Size = -1,
                    Value = Date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstAuth",
                    Size = -1,
                    Value = FirstAuth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SecondAuth",
                    Size = -1,
                    Value = SecondAuth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ThirdAuth",
                    Size = -1,
                    Value = ThirdAuth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment1",
                    Size = -1,
                    Value = Comment1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment2",
                    Size = -1,
                    Value = Comment2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Comment3",
                    Size = -1,
                    Value = Comment3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ForeName",
                    Size = -1,
                    Value = ForeName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PenaltyName",
                    Size = -1,
                    Value = PenaltyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeeIncentivesUPDATE] @Id, @TotalIncentivePayTarget, @TotalPayableYearEnd, @TotalMonthlyPIP, @PIPPayableMonthly, @IsCurrent, @EmployeeId, @UpdatedOn, @IsDeleted, @CreatedOn, @BudgetId, @FinalScore, @Pay, @PenaltyCharge, @Month, @Date, @FirstAuth, @SecondAuth, @ThirdAuth, @Comment1, @Comment2, @Comment3, @ForeName, @PenaltyName, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeesALLResult>> EmployeesALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeesALLResult>("EXEC @returnValue = [dbo].[EmployeesALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeesCREATEAsync(int? EmploymentStatusId, string City, string Nationality, string NAPSA, int? MaritalStatus, DateTime? TerminationDate, DateTime? ConfirmationDate, DateTime? JoinedDate, string PrivateEmail, string WorkEmail, string MobilePhone, string FirstName, string LastName, string MiddleName, DateTime? DOB, int? Gender, decimal? BasicPay, int? DepartmentId, int? PayGradeId, DateTime? UpdatedOn, bool? IsDeleted, DateTime? CreatedOn, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmploymentStatusId",
                    Value = EmploymentStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = -1,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nationality",
                    Size = -1,
                    Value = Nationality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NAPSA",
                    Size = -1,
                    Value = NAPSA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerminationDate",
                    Value = TerminationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ConfirmationDate",
                    Value = ConfirmationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "JoinedDate",
                    Value = JoinedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PrivateEmail",
                    Size = -1,
                    Value = PrivateEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkEmail",
                    Size = -1,
                    Value = WorkEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobilePhone",
                    Size = -1,
                    Value = MobilePhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = -1,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = -1,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName",
                    Size = -1,
                    Value = MiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BasicPay",
                    Precision = 18,
                    Scale = 2,
                    Value = BasicPay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentId",
                    Value = DepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PayGradeId",
                    Value = PayGradeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeesCREATE] @EmploymentStatusId, @City, @Nationality, @NAPSA, @MaritalStatus, @TerminationDate, @ConfirmationDate, @JoinedDate, @PrivateEmail, @WorkEmail, @MobilePhone, @FirstName, @LastName, @MiddleName, @DOB, @Gender, @BasicPay, @DepartmentId, @PayGradeId, @UpdatedOn, @IsDeleted, @CreatedOn, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeesDELETEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeesDELETE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmployeesSINGLEResult>> EmployeesSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmployeesSINGLEResult>("EXEC @returnValue = [dbo].[EmployeesSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeesUPDATEAsync(int? Id, int? EmploymentStatusId, string City, string Nationality, string NAPSA, int? MaritalStatus, DateTime? TerminationDate, DateTime? ConfirmationDate, DateTime? JoinedDate, string PrivateEmail, string WorkEmail, string MobilePhone, string FirstName, string LastName, string MiddleName, DateTime? DOB, int? Gender, decimal? BasicPay, int? DepartmentId, int? PayGradeId, DateTime? UpdatedOn, bool? IsDeleted, DateTime? CreatedOn, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmploymentStatusId",
                    Value = EmploymentStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = -1,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nationality",
                    Size = -1,
                    Value = Nationality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NAPSA",
                    Size = -1,
                    Value = NAPSA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaritalStatus",
                    Value = MaritalStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TerminationDate",
                    Value = TerminationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ConfirmationDate",
                    Value = ConfirmationDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "JoinedDate",
                    Value = JoinedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PrivateEmail",
                    Size = -1,
                    Value = PrivateEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkEmail",
                    Size = -1,
                    Value = WorkEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobilePhone",
                    Size = -1,
                    Value = MobilePhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = -1,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = -1,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName",
                    Size = -1,
                    Value = MiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "BasicPay",
                    Precision = 18,
                    Scale = 2,
                    Value = BasicPay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentId",
                    Value = DepartmentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PayGradeId",
                    Value = PayGradeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeesUPDATE] @Id, @EmploymentStatusId, @City, @Nationality, @NAPSA, @MaritalStatus, @TerminationDate, @ConfirmationDate, @JoinedDate, @PrivateEmail, @WorkEmail, @MobilePhone, @FirstName, @LastName, @MiddleName, @DOB, @Gender, @BasicPay, @DepartmentId, @PayGradeId, @UpdatedOn, @IsDeleted, @CreatedOn, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeIncentivesCREATEAsync(decimal? TotalIncentivePayTarget, decimal? TotalPayableYearEnd, decimal? TotalMonthlyPIP, decimal? PIPPayableMonthly, bool? IsCurrent, int? EmployeeId, DateTime? UpdatedOn, bool? IsDeleted, DateTime? CreatedOn, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TotalIncentivePayTarget",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIncentivePayTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalPayableYearEnd",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalPayableYearEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalMonthlyPIP",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalMonthlyPIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PIPPayableMonthly",
                    Precision = 18,
                    Scale = 2,
                    Value = PIPPayableMonthly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrent",
                    Value = IsCurrent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeIncentivesCREATE] @TotalIncentivePayTarget, @TotalPayableYearEnd, @TotalMonthlyPIP, @PIPPayableMonthly, @IsCurrent, @EmployeeId, @UpdatedOn, @IsDeleted, @CreatedOn, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmployeIncentivesUPDATEAsync(int? Id, decimal? TotalIncentivePayTarget, decimal? TotalPayableYearEnd, decimal? TotalMonthlyPIP, decimal? PIPPayableMonthly, bool? IsCurrent, int? EmployeeId, DateTime? UpdatedOn, bool? IsDeleted, DateTime? CreatedOn, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIncentivePayTarget",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIncentivePayTarget ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalPayableYearEnd",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalPayableYearEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalMonthlyPIP",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalMonthlyPIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PIPPayableMonthly",
                    Precision = 18,
                    Scale = 2,
                    Value = PIPPayableMonthly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrent",
                    Value = IsCurrent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EmployeIncentivesUPDATE] @Id, @TotalIncentivePayTarget, @TotalPayableYearEnd, @TotalMonthlyPIP, @PIPPayableMonthly, @IsCurrent, @EmployeeId, @UpdatedOn, @IsDeleted, @CreatedOn, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllEmployeesReportResult>> GetAllEmployeesReportAsync(string Gender, int? Status, string StatementType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 100,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StatementType",
                    Size = 40,
                    Value = StatementType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllEmployeesReportResult>("EXEC @returnValue = [dbo].[GetAllEmployeesReport] @Gender, @Status, @StatementType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PayGradesALLResult>> PayGradesALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PayGradesALLResult>("EXEC @returnValue = [dbo].[PayGradesALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PayGradesCREATEAsync(string PayName, decimal? MaxSalary, decimal? MinSalary, DateTime? UpdatedOn, bool? IsDeleted, DateTime? CreatedOn, int? Monthly, string Description, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PayName",
                    Size = -1,
                    Value = PayName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaxSalary",
                    Precision = 18,
                    Scale = 2,
                    Value = MaxSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "MinSalary",
                    Precision = 18,
                    Scale = 2,
                    Value = MinSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedOn",
                    Value = UpdatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Monthly",
                    Value = Monthly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PayGradesCREATE] @PayName, @MaxSalary, @MinSalary, @UpdatedOn, @IsDeleted, @CreatedOn, @Monthly, @Description, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PayGradesDELETEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PayGradesDELETE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PayGradesSINGLEResult>> PayGradesSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PayGradesSINGLEResult>("EXEC @returnValue = [dbo].[PayGradesSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PayGradesUPDATEAsync(int? Id, string PayName, decimal? MaxSalary, decimal? MinSalary, int? Monthly, string Description, bool? IsDeleted, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PayName",
                    Size = -1,
                    Value = PayName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaxSalary",
                    Precision = 18,
                    Scale = 2,
                    Value = MaxSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "MinSalary",
                    Precision = 18,
                    Scale = 2,
                    Value = MinSalary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Monthly",
                    Value = Monthly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsDeleted",
                    Value = IsDeleted ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PayGradesUPDATE] @Id, @PayName, @MaxSalary, @MinSalary, @Monthly, @Description, @IsDeleted, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PenaltiesALLResult>> PenaltiesALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PenaltiesALLResult>("EXEC @returnValue = [dbo].[PenaltiesALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PenaltiesSINGLEResult>> PenaltiesSINGLEAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PenaltiesSINGLEResult>("EXEC @returnValue = [dbo].[PenaltiesSINGLE] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PenaltiesUPDATEAsync(int? Id, decimal? Charge, string PenaltyName, DateTime? CreatedOn, DateTime? LastModifiedOn, string CreatedBy, string LastModifiedBy, int? EmployeeId, int? EmpIncentives, decimal? Times, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Charge",
                    Precision = 18,
                    Value = Charge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenaltyName",
                    Size = -1,
                    Value = PenaltyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Scale = 7,
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "LastModifiedOn",
                    Scale = 7,
                    Value = LastModifiedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = -1,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastModifiedBy",
                    Size = -1,
                    Value = LastModifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmpIncentives",
                    Value = EmpIncentives ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Times",
                    Precision = 18,
                    Value = Times ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PenaltiesUPDATE] @Id, @Charge, @PenaltyName, @CreatedOn, @LastModifiedOn, @CreatedBy, @LastModifiedBy, @EmployeeId, @EmpIncentives, @Times, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PenaltyCREATEAsync(decimal? Charge, string PenaltyName, DateTime? CreatedOn, DateTime? LastModifiedOn, string CreatedBy, string LastModifiedBy, int? EmployeeId, int? EmpIncentives, decimal? Times, OutputParameter<int?> Identity, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdentity = new SqlParameter
            {
                ParameterName = "Identity",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Identity?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Charge",
                    Precision = 18,
                    Value = Charge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PenaltyName",
                    Size = -1,
                    Value = PenaltyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedOn",
                    Scale = 7,
                    Value = CreatedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "LastModifiedOn",
                    Scale = 7,
                    Value = LastModifiedOn ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = -1,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastModifiedBy",
                    Size = -1,
                    Value = LastModifiedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmployeeId",
                    Value = EmployeeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EmpIncentives",
                    Value = EmpIncentives ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Times",
                    Precision = 18,
                    Value = Times ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIdentity,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PenaltyCREATE] @Charge, @PenaltyName, @CreatedOn, @LastModifiedOn, @CreatedBy, @LastModifiedBy, @EmployeeId, @EmpIncentives, @Times, @Identity OUTPUT", sqlParameters, cancellationToken);

            Identity.SetValue(parameterIdentity.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
